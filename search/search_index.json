{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"POPout is a companion software package that allows users with PRS data to identify and quantify an enrichment of large effects in one or both of the tails of the trait distribution. Download Links The POPout Software Package OS Link Last Updated Linux 64-Bit v0.0.3 1-13-2025 Mac 64-Bit v0.0.3 1-10-2025 Windows NA Not Available Latest Updates 2025-1-25 (v0.1.7) Created Website. update log can be found here Overview POPout code is available in R and in Python3. Users can use either version. For more information on installing dependencies, please refer to Requirements . To run POPOut using toy data see our Quick Start Tutorial. . Following the Quick Start, the full guide provides more realistic examples to help you get started with your own data. Citation: Our manuscript is currently under review Please cite our preprint : Souaiaia, Tade et al. \u201cStriking Departures from Polygenic Architecture in the Tails of Complex Traits.\u201d bioRxiv : the preprint server for biology 2024.11.18.624155. 20 Nov. 2024, doi:10.1101/2024.11.18.624155. Preprint. Contact For questions about the methodology, this website, or our manuscript please contact Dr Clive Hoggart , Dr Tade Souaiaia , or Dr Paul O'Reilly . For source code and coding issues please visit the POPout github here . Acknowledgements We would like to thank Brian Fulton-Howard for his feedback and help with testing.","title":"Home"},{"location":"#download-links","text":"The POPout Software Package OS Link Last Updated Linux 64-Bit v0.0.3 1-13-2025 Mac 64-Bit v0.0.3 1-10-2025 Windows NA Not Available Latest Updates","title":"Download Links"},{"location":"#2025-1-25-v017","text":"Created Website. update log can be found here","title":"2025-1-25 (v0.1.7)"},{"location":"#overview","text":"POPout code is available in R and in Python3. Users can use either version. For more information on installing dependencies, please refer to Requirements . To run POPOut using toy data see our Quick Start Tutorial. . Following the Quick Start, the full guide provides more realistic examples to help you get started with your own data. Citation: Our manuscript is currently under review Please cite our preprint : Souaiaia, Tade et al. \u201cStriking Departures from Polygenic Architecture in the Tails of Complex Traits.\u201d bioRxiv : the preprint server for biology 2024.11.18.624155. 20 Nov. 2024, doi:10.1101/2024.11.18.624155. Preprint.","title":"Overview"},{"location":"#contact","text":"For questions about the methodology, this website, or our manuscript please contact Dr Clive Hoggart , Dr Tade Souaiaia , or Dr Paul O'Reilly . For source code and coding issues please visit the POPout github here .","title":"Contact"},{"location":"#acknowledgements","text":"We would like to thank Brian Fulton-Howard for his feedback and help with testing.","title":"Acknowledgements"},{"location":"guide_background/","text":"Background PRS methods require as input summary statistics from genome wide association studies. If unfamiliar with GWAS or in need of a refresher consider reading this paper . Genome-wide association studies (GWAS) involve analyzing the genomes of a large group of individuals. For a binary trait (like blue or brown eyes) this involves comparing the frequency of genetic variations in each group to produce an odds-ratio (measure of association) and a p-value to measure the signficance of the realtionship at each SNP. For continuous measures (like height) this results in an effect size (measure of continuous association) and p-value that measure the significance of our relationship. GWAS results can be summarized in a sumstats file which looks like this: CHR ID REF A1 A1_FREQ OBS_CT SE BETA P 1 rs100 A T 0.1 100 0.01 1.10 0.01 2 rs200 C G 0.2 100 0.02 -1.10 0.05 3 rs300 G A 0.3 100 0.03 1.02 0.10 PRS basics Polygenic scores combine genetic variant associations genome-wide by summing their effects to produce individual scores that predict the phenotype. Different PRS methods use different statistical methods to select variants and estimate their effect sizes for use in the PRS. BridgePRS, like many other PRS methods, requires genotype and phenotype data from individuals (several hundred samples) in addition to GWAS summary statistics to estimate the PRS. The predictive power of PRS is assessed in genotype and phenotype data from unseen samples. BridgePRS reports PRS accuracy by the residual variance explained \\(R^2\\) (accounting for the variance explained by the non-genetic covariates included in the model). For binary traits Nagelkerke \\(R^2\\) is used. POPout Explain what it is.","title":"Background"},{"location":"guide_background/#background","text":"PRS methods require as input summary statistics from genome wide association studies. If unfamiliar with GWAS or in need of a refresher consider reading this paper . Genome-wide association studies (GWAS) involve analyzing the genomes of a large group of individuals. For a binary trait (like blue or brown eyes) this involves comparing the frequency of genetic variations in each group to produce an odds-ratio (measure of association) and a p-value to measure the signficance of the realtionship at each SNP. For continuous measures (like height) this results in an effect size (measure of continuous association) and p-value that measure the significance of our relationship. GWAS results can be summarized in a sumstats file which looks like this: CHR ID REF A1 A1_FREQ OBS_CT SE BETA P 1 rs100 A T 0.1 100 0.01 1.10 0.01 2 rs200 C G 0.2 100 0.02 -1.10 0.05 3 rs300 G A 0.3 100 0.03 1.02 0.10","title":"Background"},{"location":"guide_background/#prs-basics","text":"Polygenic scores combine genetic variant associations genome-wide by summing their effects to produce individual scores that predict the phenotype. Different PRS methods use different statistical methods to select variants and estimate their effect sizes for use in the PRS. BridgePRS, like many other PRS methods, requires genotype and phenotype data from individuals (several hundred samples) in addition to GWAS summary statistics to estimate the PRS. The predictive power of PRS is assessed in genotype and phenotype data from unseen samples. BridgePRS reports PRS accuracy by the residual variance explained \\(R^2\\) (accounting for the variance explained by the non-genetic covariates included in the model). For binary traits Nagelkerke \\(R^2\\) is used.","title":"PRS basics"},{"location":"guide_background/#popout","text":"Explain what it is.","title":"POPout"},{"location":"guide_input/","text":"Input Data POP Files File Specifications A POP file is simple: Phenotype Prs -2.2 -1.5 -1.3 -0.4 -0.3 -0.1 -0.6 0.2 1.6 0.9 2.1 1.3 2.5 2.1 Creating a POP File: Creating a POP File The following command will validate the command line data and create a target configuration file ./POPout.py --createPopFile --prs data/prs.toy --pheno data/pheno.toy This command will create a POPout File","title":"Input Data"},{"location":"guide_input/#input-data","text":"","title":"Input Data"},{"location":"guide_input/#pop-files","text":"","title":"POP Files"},{"location":"guide_input/#file-specifications","text":"A POP file is simple: Phenotype Prs -2.2 -1.5 -1.3 -0.4 -0.3 -0.1 -0.6 0.2 1.6 0.9 2.1 1.3 2.5 2.1","title":"File Specifications"},{"location":"guide_input/#creating-a-pop-file","text":"Creating a POP File The following command will validate the command line data and create a target configuration file ./POPout.py --createPopFile --prs data/prs.toy --pheno data/pheno.toy This command will create a POPout File","title":"Creating a POP File:"},{"location":"guide_options/","text":"Commands","title":"Options"},{"location":"guide_options/#commands","text":"","title":"Commands"},{"location":"guide_output/","text":"Output Data Running POPout will create an output file which has the following format:","title":"Output Data"},{"location":"guide_output/#output-data","text":"Running POPout will create an output file which has the following format:","title":"Output Data"},{"location":"misc_faq/","text":"Frequently Asked Questions We will continue to update this list to address the more common questions. I've receive the following error message, what should I do? No permission You must fix permission.","title":"Frequently Asked Questions"},{"location":"misc_faq/#frequently-asked-questions","text":"We will continue to update this list to address the more common questions. I've receive the following error message, what should I do? No permission You must fix permission.","title":"Frequently Asked Questions"},{"location":"quikstart_demo/","text":"POPout comes with example data for multiple toy traits: data/toy_height.pop , data/toy_bmi.pop , data/toy_wbc.pop , and data/toy_vol.pop . Each toy data file is in \"POP format\" which is column or comma separated data where the first column is the phenotype and the second column is the PRS values. For more information on POP format and help getting your own data into POP format please see own data, see Guide: Input Data . Run the demo using Python3: To run the demo using Python3, please type: ./POPout.py data/toy_height.pop data/toy_bmi.pop data/toy_weight.pop data/toy_height.pop Results: If POPout runs successfully on the toy data, go to the next page for information on interpretation of the output result directories.","title":"Example Run"},{"location":"quikstart_demo/#run-the-demo-using-python3","text":"To run the demo using Python3, please type: ./POPout.py data/toy_height.pop data/toy_bmi.pop data/toy_weight.pop data/toy_height.pop","title":"Run the demo using Python3:"},{"location":"quikstart_demo/#results","text":"If POPout runs successfully on the toy data, go to the next page for information on interpretation of the output result directories.","title":"Results:"},{"location":"quikstart_result/","text":"Interpreting results","title":"Output Files"},{"location":"quikstart_result/#interpreting-results","text":"","title":"Interpreting results"},{"location":"req_python/","text":"Python Requirements Python3+ can be downloaded here . POPout relies on the numpy, scipy, and statsmodels libraries for computation and the matplotlib library for plotting. To use the python3 executable on the terminal, type the following command from within the directory: chmod +x POPout.py before proceeding NumPy NumPy is a free, open-source Python library for scientific computing. It can be downloaded here: https://numpy.org/install/ . SciPy SciPy is an open-source Python library used for scientific and technical computing. It builds on top of NumPy and provides a wide range of functionalities for tasks commonly encountered in science and engineering and can be downloaded here https://scipy.org/ . statsmodels Statsmodels is a Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration. It can be downloaded here: www.statsmodels.org Matplotlib POPout plots are created using the matplotlib library, it can be downloaded here: matplotlib ).","title":"Python3"},{"location":"req_python/#python-requirements","text":"Python3+ can be downloaded here . POPout relies on the numpy, scipy, and statsmodels libraries for computation and the matplotlib library for plotting. To use the python3 executable on the terminal, type the following command from within the directory: chmod +x POPout.py before proceeding","title":"Python Requirements"},{"location":"req_python/#numpy","text":"NumPy is a free, open-source Python library for scientific computing. It can be downloaded here: https://numpy.org/install/ .","title":"NumPy"},{"location":"req_python/#scipy","text":"SciPy is an open-source Python library used for scientific and technical computing. It builds on top of NumPy and provides a wide range of functionalities for tasks commonly encountered in science and engineering and can be downloaded here https://scipy.org/ .","title":"SciPy"},{"location":"req_python/#statsmodels","text":"Statsmodels is a Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration. It can be downloaded here: www.statsmodels.org","title":"statsmodels"},{"location":"req_python/#matplotlib","text":"POPout plots are created using the matplotlib library, it can be downloaded here: matplotlib ).","title":"Matplotlib"},{"location":"req_r/","text":"R R ( \\(\\geq\\) 3.6.3) can be downloaded here . Packages POPout requires the following R packages: data.table R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"data.table\"))","title":"R"},{"location":"req_r/#r","text":"R ( \\(\\geq\\) 3.6.3) can be downloaded here .","title":"R"},{"location":"req_r/#packages","text":"POPout requires the following R packages: data.table R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"data.table\"))","title":"Packages"},{"location":"req_software/","text":"Requirements BridgePRS uses R ( \\(\\geq\\) 3.6.3), plink , and runs using a python3 wrapper. R packages BridgePRS requires the following R packages: BEDMatrix, boot, data.table, doMC, glmnet, MASS, optparse, parallel, and R.utils R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"BEDMatrix\",\"boot\",\"data.table\",\"doMC\",\"glmnet\",\"MASS\",\"optparse\",\"parallel\",\"R.utils\")) Plink Plink documentation and downlaod can be found here . The BridgePRS downlaod includes plink for Linux and MacOs and the software will attempt to locate the correct version. To override this behaviour and use a specific version please use the flag --plinkPath $PLINKPATH to direct BridgePRS to the file location. Extra MacOs Security: MacOs often block executables if they are not approved from the app store. You may have to change your settings to allow Plink to be called For instructions on how to do so, please click here . Python Python3+ can be downloaded here . Optional plots are created using the python library [ matplotlib ] (https://matplotlib.org/stable/users/installing/index.html)). Bash BridgePRS can also be run using a shell script as described here . Shell scripts that run the example data are provided with the download. BridgePRS check Once BridgePRS has been downloaded and made executable the following command will check system compatibility and prompt you to install missing software: ./bridgePRS check requirements Checking Requirements: System: platform=linux, cores(available)=8, cores(used)=1 (TIP: Using More Than One Core Will Improve Performace (e.g. ---cores 7)) Plink: found=true, path=/home/tade/Bin/plink R: found=true, path=/usr/bin/R, version=3.6.3 (packages=up to date) Python3: found=true, path=/usr/bin/python3, matplotlib=true Complete","title":"Req software"},{"location":"req_software/#requirements","text":"BridgePRS uses R ( \\(\\geq\\) 3.6.3), plink , and runs using a python3 wrapper.","title":"Requirements"},{"location":"req_software/#r-packages","text":"BridgePRS requires the following R packages: BEDMatrix, boot, data.table, doMC, glmnet, MASS, optparse, parallel, and R.utils R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"BEDMatrix\",\"boot\",\"data.table\",\"doMC\",\"glmnet\",\"MASS\",\"optparse\",\"parallel\",\"R.utils\"))","title":"R packages"},{"location":"req_software/#plink","text":"Plink documentation and downlaod can be found here . The BridgePRS downlaod includes plink for Linux and MacOs and the software will attempt to locate the correct version. To override this behaviour and use a specific version please use the flag --plinkPath $PLINKPATH to direct BridgePRS to the file location. Extra MacOs Security: MacOs often block executables if they are not approved from the app store. You may have to change your settings to allow Plink to be called For instructions on how to do so, please click here .","title":"Plink"},{"location":"req_software/#python","text":"Python3+ can be downloaded here . Optional plots are created using the python library [ matplotlib ] (https://matplotlib.org/stable/users/installing/index.html)).","title":"Python"},{"location":"req_software/#bash","text":"BridgePRS can also be run using a shell script as described here . Shell scripts that run the example data are provided with the download.","title":"Bash"},{"location":"req_software/#bridgeprs-check","text":"Once BridgePRS has been downloaded and made executable the following command will check system compatibility and prompt you to install missing software: ./bridgePRS check requirements Checking Requirements: System: platform=linux, cores(available)=8, cores(used)=1 (TIP: Using More Than One Core Will Improve Performace (e.g. ---cores 7)) Plink: found=true, path=/home/tade/Bin/plink R: found=true, path=/usr/bin/R, version=3.6.3 (packages=up to date) Python3: found=true, path=/usr/bin/python3, matplotlib=true Complete","title":"BridgePRS check"},{"location":"req_system/","text":"POPout is designed to work on the command line for all unix-based operating systems. Preparation After downloading and unzipping POPout a directory with the following contents will be created: POPout.py <--- python executable POPout.R <--- R executable data/ <--- example toy data folder src/ <--- source code folder LICENSE README.me Verify that the following files have been downloaded and then confirm that the the necessary Python3 or R libraries and dependencies are installed for and available by following the instructions for Python3 or R .","title":"System"},{"location":"req_system/#preparation","text":"After downloading and unzipping POPout a directory with the following contents will be created: POPout.py <--- python executable POPout.R <--- R executable data/ <--- example toy data folder src/ <--- source code folder LICENSE README.me Verify that the following files have been downloaded and then confirm that the the necessary Python3 or R libraries and dependencies are installed for and available by following the instructions for Python3 or R .","title":"Preparation"}]}