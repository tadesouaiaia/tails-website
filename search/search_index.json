{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pout is a software tool to apply the \"PRS-on-Phenotype outlier\" (POPout) test. The POPout test was developed to test for departures from common-variant expectations in the tails of trait distributions. Users with PRS and quantitative trait data on a sample of individuals can use the POPout software here to perform the POPout test on single or multiple traits and to produce output files that provide the results and figures for illustration. Download Links The POPout Software Package OS Link Last Updated Linux 64-Bit v0.0.3 1-13-2025 Mac 64-Bit v0.0.3 1-10-2025 Windows NA Not Available Overview POPout code is available in R and in Python3. Users can use either version. For more information on installing dependencies, please refer to Requirements . To run POPOut using toy data see our Quick Start Tutorial. . Following the Quick Start, the full guide provides more information on the theory and the options regarding POPout. Citation: Our manuscript is currently under review Please cite our preprint : Souaiaia, Tade et al. \u201cStriking Departures from Polygenic Architecture in the Tails of Complex Traits.\u201d bioRxiv : the preprint server for biology 2024.11.18.624155. 20 Nov. 2024, doi:10.1101/2024.11.18.624155. Preprint. To use the family-based STANDout test described in the manuscript please go to: www.sibarc.net . Contact For questions about the methodology, this website, or our manuscript please contact Dr Tade Souaiaia , or [Dr Paul Dr Clive Hoggart , Dr O'Reilly . For source code and coding issues please visit the POPout github page here .","title":"Home"},{"location":"#download-links","text":"The POPout Software Package OS Link Last Updated Linux 64-Bit v0.0.3 1-13-2025 Mac 64-Bit v0.0.3 1-10-2025 Windows NA Not Available","title":"Download Links"},{"location":"#overview","text":"POPout code is available in R and in Python3. Users can use either version. For more information on installing dependencies, please refer to Requirements . To run POPOut using toy data see our Quick Start Tutorial. . Following the Quick Start, the full guide provides more information on the theory and the options regarding POPout. Citation: Our manuscript is currently under review Please cite our preprint : Souaiaia, Tade et al. \u201cStriking Departures from Polygenic Architecture in the Tails of Complex Traits.\u201d bioRxiv : the preprint server for biology 2024.11.18.624155. 20 Nov. 2024, doi:10.1101/2024.11.18.624155. Preprint. To use the family-based STANDout test described in the manuscript please go to: www.sibarc.net .","title":"Overview"},{"location":"#contact","text":"For questions about the methodology, this website, or our manuscript please contact Dr Tade Souaiaia , or [Dr Paul Dr Clive Hoggart , Dr O'Reilly . For source code and coding issues please visit the POPout github page here .","title":"Contact"},{"location":"guide_background/","text":"Background PRS methods require as input summary statistics from genome wide association studies. If unfamiliar with GWAS or in need of a refresher consider reading this paper . Genome-wide association studies (GWAS) involve analyzing the genomes of a large group of individuals. For a binary trait (like blue or brown eyes) this involves comparing the frequency of genetic variations in each group to produce an odds-ratio (measure of association) and a p-value to measure the signficance of the realtionship at each SNP. For continuous measures (like height) this results in an effect size (measure of continuous association) and p-value that measure the significance of our relationship. GWAS results can be summarized in a sumstats file which looks like this: CHR ID REF A1 A1_FREQ OBS_CT SE BETA P 1 rs100 A T 0.1 100 0.01 1.10 0.01 2 rs200 C G 0.2 100 0.02 -1.10 0.05 3 rs300 G A 0.3 100 0.03 1.02 0.10 PRS Polygenic scores combine genetic variant associations genome-wide by summing their effects to produce individual scores that predict the phenotype. Different PRS methods use different statistical methods to select variants and estimate their effect sizes for use in the PRS. The predictive power of PRS is usually assesed by residual variance explained \\(R^2\\) or other similar metrics. POPout When genetic architecture is complex predictive performance can vary across the trait distribution which can make global metrics like \\(R^2\\) inaccurate at certain strata. Specifically when large rare variants are present in one tail of the trait distribtion we often see performance loss or \"POPout\" whereby individuals with very high or low trait values do not have correspondingly high or low PRS values. POPout quantifies and assesses the prescence of this phenonomena.","title":"Background"},{"location":"guide_background/#background","text":"PRS methods require as input summary statistics from genome wide association studies. If unfamiliar with GWAS or in need of a refresher consider reading this paper . Genome-wide association studies (GWAS) involve analyzing the genomes of a large group of individuals. For a binary trait (like blue or brown eyes) this involves comparing the frequency of genetic variations in each group to produce an odds-ratio (measure of association) and a p-value to measure the signficance of the realtionship at each SNP. For continuous measures (like height) this results in an effect size (measure of continuous association) and p-value that measure the significance of our relationship. GWAS results can be summarized in a sumstats file which looks like this: CHR ID REF A1 A1_FREQ OBS_CT SE BETA P 1 rs100 A T 0.1 100 0.01 1.10 0.01 2 rs200 C G 0.2 100 0.02 -1.10 0.05 3 rs300 G A 0.3 100 0.03 1.02 0.10","title":"Background"},{"location":"guide_background/#prs","text":"Polygenic scores combine genetic variant associations genome-wide by summing their effects to produce individual scores that predict the phenotype. Different PRS methods use different statistical methods to select variants and estimate their effect sizes for use in the PRS. The predictive power of PRS is usually assesed by residual variance explained \\(R^2\\) or other similar metrics.","title":"PRS"},{"location":"guide_background/#popout","text":"When genetic architecture is complex predictive performance can vary across the trait distribution which can make global metrics like \\(R^2\\) inaccurate at certain strata. Specifically when large rare variants are present in one tail of the trait distribtion we often see performance loss or \"POPout\" whereby individuals with very high or low trait values do not have correspondingly high or low PRS values. POPout quantifies and assesses the prescence of this phenonomena.","title":"POPout"},{"location":"guide_input/","text":"Input Data POP Files The POP (PRS on Phenotype) file specification simply requires two columns of whitespace or comma-separated data where the first column contains PRS values and the second the corresponding Phenotype values. Note that the header is optional for our Python scripts but required by R: PRS Phenotype -2.2 -1.5 -1.3 -0.4 -0.3 -0.1 -0.6 0.2 1.6 0.9 2.1 1.3 2.5 2.1 If you have PRS and Phenotype data with sample IDs in the first column then you can create a POP file using our Python script as shown with example data: Creating a POP File The following command will create POP file named my_file.pop. ./POPout.py --makePOPfile data/TEST.prs data/TEST.pheno -o my_file","title":"Input Data"},{"location":"guide_input/#input-data","text":"","title":"Input Data"},{"location":"guide_input/#pop-files","text":"The POP (PRS on Phenotype) file specification simply requires two columns of whitespace or comma-separated data where the first column contains PRS values and the second the corresponding Phenotype values. Note that the header is optional for our Python scripts but required by R: PRS Phenotype -2.2 -1.5 -1.3 -0.4 -0.3 -0.1 -0.6 0.2 1.6 0.9 2.1 1.3 2.5 2.1 If you have PRS and Phenotype data with sample IDs in the first column then you can create a POP file using our Python script as shown with example data: Creating a POP File The following command will create POP file named my_file.pop. ./POPout.py --makePOPfile data/TEST.prs data/TEST.pheno -o my_file","title":"POP Files"},{"location":"guide_options/","text":"Commands POPout can be run using our Python script with the following command: ./POPout.py trait1.pop trait2.pop.... The following commands are supported: Names (--names) By default the file prefixes are used as trait names, to use custom trait names the user can provide a list of names equal in length to the number of POP files, for example: ./POPout.py trait1.pop trait2.pop --names traitA traitB Output Prefix (--out) The default output prefix is \"out\" but it can be changed as follows: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput Plot Format (--plotFormat) The default format for plots is \"pdf\" but this can be changed to png as follows: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput --plotFormat png Tail Size (--tailSize) By default POPout considers the lower and upper 1% as the trait tails. This can be changed as follows*: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput --plotFormat png --tailSize 5 *Note that for this option, values between 1 and 25 are valid as are the values 0.5 (half a percent), 0.25 (a quarter percent), and 0.1 (a tenth of a percent).","title":"Options"},{"location":"guide_options/#commands","text":"POPout can be run using our Python script with the following command: ./POPout.py trait1.pop trait2.pop.... The following commands are supported:","title":"Commands"},{"location":"guide_options/#_1","text":"","title":""},{"location":"guide_options/#names-names","text":"By default the file prefixes are used as trait names, to use custom trait names the user can provide a list of names equal in length to the number of POP files, for example: ./POPout.py trait1.pop trait2.pop --names traitA traitB","title":"Names (--names)"},{"location":"guide_options/#output-prefix-out","text":"The default output prefix is \"out\" but it can be changed as follows: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput","title":"Output Prefix (--out)"},{"location":"guide_options/#plot-format-plotformat","text":"The default format for plots is \"pdf\" but this can be changed to png as follows: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput --plotFormat png","title":"Plot Format (--plotFormat)"},{"location":"guide_options/#tail-size-tailsize","text":"By default POPout considers the lower and upper 1% as the trait tails. This can be changed as follows*: ./POPout.py trait1.pop trait2.pop --names traitA traitB --out customOutput --plotFormat png --tailSize 5 *Note that for this option, values between 1 and 25 are valid as are the values 0.5 (half a percent), 0.25 (a quarter percent), and 0.1 (a tenth of a percent).","title":"Tail Size (--tailSize)"},{"location":"guide_output/","text":"Output Data Running POPout (as described in the quick-start tutorial) will create an output file with the following information: --- len pv1 pv2 e1 e1Lo e1Hi e2 e2Lo e2Hi QC emp1 emp2 toy_bp 12648 0.098 8.9e-06 -0.14 -0.30 0.025 -0.14 -0.30 0.025 True 0.92 0.01 toy_vitD 2146 0.594 0.928 0.02 -0.05 0.085 0.02 -0.05 0.085 True 0.17 0.67 toy_hg 2146 3.4e-08 3.4e-10 0.99 0.75 1.224 0.99 0.75 1.224 True 0.01 0.01 toy_bmi 2146 1.9e-06 0.322 0.86 0.59 1.129 0.86 0.59 1.129 True 0.01 0.88 toy_height 8582 0.017 5.7e-04 0.41 0.08 0.735 0.41 0.08 0.735 True 0.03 0.01 For each trait, the columns denote: Column Data --- Trait Name len Sample Size pv1 Lower Tail Pvalue pv2 Upper Tail Pvalue e1 Lower Tail POPout Effect Size e1Lo Lower Tail 95% CI - Lower End e1Hi Lower Tail 95% CI - Upper End e2 Upper Tail POPout Effect Size e2Lo Upper Tail 95% CI - Lower End e2Hi Upper Tail 95% CI - Upper End QC QC-Test Result emp1 Rank Based Empirical Pvalue emp2 Rank Based Empirical Pvalue For more information on how these values are calculated please see our manuscript .","title":"Output Data"},{"location":"guide_output/#output-data","text":"Running POPout (as described in the quick-start tutorial) will create an output file with the following information: --- len pv1 pv2 e1 e1Lo e1Hi e2 e2Lo e2Hi QC emp1 emp2 toy_bp 12648 0.098 8.9e-06 -0.14 -0.30 0.025 -0.14 -0.30 0.025 True 0.92 0.01 toy_vitD 2146 0.594 0.928 0.02 -0.05 0.085 0.02 -0.05 0.085 True 0.17 0.67 toy_hg 2146 3.4e-08 3.4e-10 0.99 0.75 1.224 0.99 0.75 1.224 True 0.01 0.01 toy_bmi 2146 1.9e-06 0.322 0.86 0.59 1.129 0.86 0.59 1.129 True 0.01 0.88 toy_height 8582 0.017 5.7e-04 0.41 0.08 0.735 0.41 0.08 0.735 True 0.03 0.01 For each trait, the columns denote: Column Data --- Trait Name len Sample Size pv1 Lower Tail Pvalue pv2 Upper Tail Pvalue e1 Lower Tail POPout Effect Size e1Lo Lower Tail 95% CI - Lower End e1Hi Lower Tail 95% CI - Upper End e2 Upper Tail POPout Effect Size e2Lo Upper Tail 95% CI - Lower End e2Hi Upper Tail 95% CI - Upper End QC QC-Test Result emp1 Rank Based Empirical Pvalue emp2 Rank Based Empirical Pvalue For more information on how these values are calculated please see our manuscript .","title":"Output Data"},{"location":"misc_faq/","text":"Frequently Asked Questions We will continue to update this list to address the more common questions. I've receive the following error message, what should I do? bash: ./POPout.py: Permission denied You must fix permission, please type: chmod +x POPout.py","title":"Frequently Asked Questions"},{"location":"misc_faq/#frequently-asked-questions","text":"We will continue to update this list to address the more common questions. I've receive the following error message, what should I do? bash: ./POPout.py: Permission denied You must fix permission, please type: chmod +x POPout.py","title":"Frequently Asked Questions"},{"location":"quikstart_demo/","text":"Intro POPout comes with example data for multiple toy traits. Inside of the data directory you should see: toy_bmi.pop <--- toy bmi data toy_bp.pop <--- toy blood pressure data toy_height.pop <--- toy height data toy_hg.pop <--- toy handgrip data toy_vitD.pop <--- toy vitaminD data TEST.pheno <--- Example Phenotype data TEST.prs <--- Example PRS data The toy data files are in \"POP format\" which is column or comma separated data where the first column is the phenotype and the second column is the PRS values. For more information on POP format and help getting your own data into POP format please see Guide: Input Data . Python3 To run the demo on all the toy traits using Python, please type: ./POPout.py -o test data/toy_bp.pop data/toy_vitD.pop data/toy_hg.pop data/toy_bmi.pop data/toy_height.pop This will create three output files: test-result.txt <--- POPout Results test-dists.pdf <--- Figure For POPout distributions test-effects.pdf <--- Figure showing POPout Effect Sizes Please continue to the next page for interpretation of these results. R Alternatively, POPout can be run on a single POP-file using the following R script, which will print directly to the terminal: Rscript --vanilla POPout.R data/toy_bp.pop > test_result.txt","title":"Example Run"},{"location":"quikstart_demo/#intro","text":"POPout comes with example data for multiple toy traits. Inside of the data directory you should see: toy_bmi.pop <--- toy bmi data toy_bp.pop <--- toy blood pressure data toy_height.pop <--- toy height data toy_hg.pop <--- toy handgrip data toy_vitD.pop <--- toy vitaminD data TEST.pheno <--- Example Phenotype data TEST.prs <--- Example PRS data The toy data files are in \"POP format\" which is column or comma separated data where the first column is the phenotype and the second column is the PRS values. For more information on POP format and help getting your own data into POP format please see Guide: Input Data .","title":"Intro"},{"location":"quikstart_demo/#python3","text":"To run the demo on all the toy traits using Python, please type: ./POPout.py -o test data/toy_bp.pop data/toy_vitD.pop data/toy_hg.pop data/toy_bmi.pop data/toy_height.pop This will create three output files: test-result.txt <--- POPout Results test-dists.pdf <--- Figure For POPout distributions test-effects.pdf <--- Figure showing POPout Effect Sizes Please continue to the next page for interpretation of these results.","title":"Python3"},{"location":"quikstart_demo/#r","text":"Alternatively, POPout can be run on a single POP-file using the following R script, which will print directly to the terminal: Rscript --vanilla POPout.R data/toy_bp.pop > test_result.txt","title":"R"},{"location":"quikstart_result/","text":"Interpreting results Running the python3 commands described in the previous page will produce the following figure (test-effects.pdf) the shows trait POPout Effect Sizes: It will also produce a figure displaying the POPout distributions for each trait (test-dists.pdf): Finally, it will also produce an output file (test-results.txt) that displays the POPout test results with one row per trait. Running the R script will also produce this output. For more information on the output file format see Guide: Output Data .","title":"Output Files"},{"location":"quikstart_result/#interpreting-results","text":"Running the python3 commands described in the previous page will produce the following figure (test-effects.pdf) the shows trait POPout Effect Sizes: It will also produce a figure displaying the POPout distributions for each trait (test-dists.pdf): Finally, it will also produce an output file (test-results.txt) that displays the POPout test results with one row per trait. Running the R script will also produce this output. For more information on the output file format see Guide: Output Data .","title":"Interpreting results"},{"location":"req_python/","text":"Python Requirements Python3+ can be downloaded here . POPout relies on the numpy, scipy, and statsmodels libraries for computation and the matplotlib library for plotting. To use the python3 executable on the terminal, type the following command from within the directory: chmod +x POPout.py before proceeding NumPy NumPy is a free, open-source Python library for scientific computing. It can be downloaded here: https://numpy.org/install/ . SciPy SciPy is an open-source Python library used for scientific and technical computing. It builds on top of NumPy and provides a wide range of functionalities for tasks commonly encountered in science and engineering and can be downloaded here https://scipy.org/ . statsmodels Statsmodels is a Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration. It can be downloaded here: www.statsmodels.org Matplotlib POPout plots are created using the matplotlib library, it can be downloaded here: matplotlib ).","title":"Python3"},{"location":"req_python/#python-requirements","text":"Python3+ can be downloaded here . POPout relies on the numpy, scipy, and statsmodels libraries for computation and the matplotlib library for plotting. To use the python3 executable on the terminal, type the following command from within the directory: chmod +x POPout.py before proceeding","title":"Python Requirements"},{"location":"req_python/#numpy","text":"NumPy is a free, open-source Python library for scientific computing. It can be downloaded here: https://numpy.org/install/ .","title":"NumPy"},{"location":"req_python/#scipy","text":"SciPy is an open-source Python library used for scientific and technical computing. It builds on top of NumPy and provides a wide range of functionalities for tasks commonly encountered in science and engineering and can be downloaded here https://scipy.org/ .","title":"SciPy"},{"location":"req_python/#statsmodels","text":"Statsmodels is a Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration. It can be downloaded here: www.statsmodels.org","title":"statsmodels"},{"location":"req_python/#matplotlib","text":"POPout plots are created using the matplotlib library, it can be downloaded here: matplotlib ).","title":"Matplotlib"},{"location":"req_r/","text":"R R ( \\(\\geq\\) 3.6.3) can be downloaded here . Packages POPout requires the following R packages: data.table R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"data.table\"))","title":"R"},{"location":"req_r/#r","text":"R ( \\(\\geq\\) 3.6.3) can be downloaded here .","title":"R"},{"location":"req_r/#packages","text":"POPout requires the following R packages: data.table R Packages These packages can be installed from inside an R terminal using the command: $ R install.packages(c(\"data.table\"))","title":"Packages"},{"location":"req_system/","text":"POPout is designed to work on the command line for all unix-based operating systems. Preparation After downloading and unzipping POPout a directory with the following contents will be created: POPout.py <--- python executable POPout.R <--- R executable data/ <--- example toy data folder src/ <--- source code folder LICENSE README.me Please verify that the following files have been downloaded and unzipped into a suitable directory. Next please confirm that the the necessary Python3 or R libraries and dependencies are installed and available by following the instructions for Python3 or R .","title":"System"},{"location":"req_system/#preparation","text":"After downloading and unzipping POPout a directory with the following contents will be created: POPout.py <--- python executable POPout.R <--- R executable data/ <--- example toy data folder src/ <--- source code folder LICENSE README.me Please verify that the following files have been downloaded and unzipped into a suitable directory. Next please confirm that the the necessary Python3 or R libraries and dependencies are installed and available by following the instructions for Python3 or R .","title":"Preparation"}]}